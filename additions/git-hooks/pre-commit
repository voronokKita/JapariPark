#!/usr/bin/env python
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
import sys
import subprocess
from pathlib import Path


print('[ Git pre-commit flake8 ]')

CWD = Path(__file__).resolve().parents[2]

changed_files = (
    subprocess.check_output(
        ['git', 'diff', '--cached', '--name-only', '--diff-filter=ACM'],
        shell=False, cwd=CWD.as_posix(),
    ).decode('utf-8')
)

python_files = [line for line in changed_files.splitlines() if line.endswith('.py')]

files_inline = ' '.join(python_files)

cmd = f'pipenv run flake8 {files_inline}'
result = subprocess.run(cmd.split(), cwd=CWD.as_posix(), shell=False)

if result.returncode != 0:
    print('[ flake8 errors - commit aborted ]')
    sys.exit(result.returncode)
else:
    print('[ flake8 - OK ]')
    sys.exit(0)
