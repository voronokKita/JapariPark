# 07.20 thu

Работаю с настройками FriendWebNGINX.
Было много проблем, поскольку сервер реально сложный и объёмный.
Можно очень долго погружаться.
Пока что всё хорошо работает в standalone режиме,
завтра попробую настроить гибкое подключение к бэкенду,
так чтобы сервер не падал если бэкенд выключен.
Ну в целом нужно ещё побольше "покурить" настройки.


# 07.19 wed

Настроил FriendWeb - gunicorn и его логи.


# 07.18 tue

Прошло много времени: переезжал на новую машину (как же docker теперь летает, офигеть).
Допилил напильником FriendWeb.


# 07.06 thu

Закончил копаться в JapariService пока что.
Исправил критичный баг в инициализации JapariDB с привилегиями.


# 07.05 wed

Расширил и доработал Friends app.
Расширил и доработал Accounts app.
Копался в настройках.


# 07.04 tue

Превратил core.views в пакет.
Добавил утилиту для принта в tty и скрипт для создания пользователей.
Работал над тестовым сериализатором.

Начал расширять Friends app.


# 07.03 mon

Изучил настройки Daphne (их пока мало), настроил логгинг.
Копался в моделях Django, превратил core.models в пакет.
Закончил с моделями и с дб-роутером. Теперь нужно написать Admin и Appconf.


# 07.01 sat

Настроки и логи pgAdmin.
Немножко почистил образы - убрал vim и копирование лишних файлов.


# 06.30 fri

Успешно соединил JapariService с JapariDB в роли japari_service.
JapariDB configs and logging.


# 06.29 thu

Разбирался в базах данных, очень много курил.
Написал *.sql скрипты для инициализации базы и создания ролей.


# 06.28 wed

Настройки безопасности и всякие мелочи в JapariService, оптимизация вспомогательных утилит.
Написал логику работы JapariService с базами данных.
Успешно подключил JapariService к базе данных и проверил через pgAdmin.


# 06.27 tue

Настройки безопасности и прав доступа в JapariDB.
Контейне с pgAdmin.
Compose pgAdmin.
Успешно протестировал соединение pgAdmin с JapariDB.


# 06.26 mon

Начал работу над базой данных.
Создал простой Dockerfile.
Создал и настроил пользователя в группе postgres с продуманными правами.
Compose up.


# 06.22 thu

Осмотрел DRF, в общих чертах понял.


# 06.21 wed

Успешно связал 2 контейнера через прокси-контейнер в оверлейной сети.

Успешно поигрался с DRF, завтра продолжу!
Но в целом API хорошо работает и логика мне ясна. Теперь я могу строить свою систему с его помощью.


# 06.20 tue

Ох, ну и день...
Начался с неудачной попытки освоить Django RF. То ли у них где-то бага, то ли просто обучающий пример не подходит под структуру моего проекта. Потом я буду изучать всё это по шагам.

Дальше я взялся разбираться с оверлейной сетью Docker и что-то так закопался в мелочи и всякие детали контейнеров, что просто утонул в этом.

Ещё меня бесит и преследует проблема автиматического добавления / слешей в URL.

Изменения в целом: поменял серверам порты на 80, определился с псевдонимами контейнеров в сетях, улучшил настройи и убрал свои лишние эксперименты.


# 06.19 mon

Настроил Docker для JapariService с сервером.
Настроил pytest для JapariService.
Написал Docker Compose для всего.


# 06.18 sun

Небольшие улучшения к бэкенду и фронтенду.
Бэкенд-приложение Accounts.
Установил django-debug-toolbar.

Бэкенд-приложение core.
Подключил Daphne к команде runserver.
Переписал git-hooks.
Написал базовые бэкенд-тесты.


# 06.17 sat

Оба контейнера FriendsWeb теперь общаются через мост! Реверс прокси успешно передаёт сообщение на обработку приложением.

Собрал FriendsWeb в compose. Всё работает прекрасно.


# 06.16 fri

Отшлифовал NGINX в Докер.
Изучил разные аспекты безопасности, передачу секретов на стадии build.

Починил и настроил FriendsWeb! Стало НАМНОГО чище и яснее.

Оба контейнера работают как надо.


# 06.15 thu

Разбирался в запуске серверов в Alpine. Daphne отлично работает.
Пока что закончил с Backend.

Начал работу над переработкой FriendsWeb в соответствии с тем что узнал, разделяя его на два контейнера.
Собрал отдельный контейнер с NGINX.
Обнаружил что нельзя использовать .dockerenv для переброски пароля, ведь он остаётся в слоях!
Ощущаю что стал очень хорошо понимать будущее своего проекта и намного лучше видеть, как сделать его ясным и чистым.


# 06.14 wed

Упаковал Бэкенд в Докер.
Настроил в Compose.


# 06.13 tue

Какая-то лень накатила -_-
Наконец взялся за Бэкенд. Написал базовое Django-приложение.
Выше пропустил запись, когда допилил запуск фронта в контейнере.


# 06.06 tue

Финальная уборка и наведение порядка.
Базовое фронтенд-приложение фактически закончено.

Работал над докером но столкнулся с уже новыми проблемами - порты, сокеты, запуск.
Буду работать над этим потом.


# 06.05 mon

Закончил со всеми своими идеями по Gunicorn + NGINX! ! !
Ух было так много разных идей и веток, по которым двигались мысли. Заходили в тупики.
И всё в итоге сошлось и заработало как надо!


# 06.04 sun

Разбирался с NGINX и сокетами.
Мне понадобилось прописать NOPASSWORD в sudo для nginx. Это нужно иметь в виду.
Поскольку программа предназначена для развёртывания в докер, там легко автоматизировать такие вещи. Но чисто теоретически, стоит предусмотреть опцию с ручным развёртыванием.
Github Actions вроде бы и так должен съесть `sudo nginx` без пароля.

На ночь думал о проблемах импортов и связности.


# 06.03 sat

Начал читать про NGINX. Подготовил веб-приложение под дальнеёшую работу с серверами.
Снова потребовал много переструктурировать =/
Очень большая проблема именно с этим - изначально не вполне понимаешь как структурировать файлы. И по мере того как разбираешься с модулями и библиотеками неизбежно понимаешь, что до этого сделал неудобно и надо снова приводить к лучшему виду.

Долго и со скрипом разбирался в NGINX.
Вспоминал как когда-то разбирался в Апачи и тогда вообще ничего не понимал толком. Сейчас попроще конечно, хотя мне всё равно непривычно работать с файлами конфигурации и возникает много вопросов. Нет ощущения свободы.


# 06.01 thu

Закончил с пирамидой тестирования.

Сделал большой и окончательный рефакторинг структуры проекта.
Идеи и видение окончательно сложилось.


# 06.02 fri

Поигравшись с принципами CI/CD, я решил забить на вторую часть и предельно уменьгить первую.
Будет только набор автоматизированных тестов в Github и хватит.
На будущее знаний об этом достаточно.

Работал над Github Actions. Не справился с тестами Docker.
Смог сделать build образа, но run так и не вышло.
И нагуглить ничего толкового не смог. Какие-то куски информации которую непонятно как связать.

Запилил Gunicorn с тестами 😎


# 05.30 tue

Поработал над структурой Friends: конфигурации, импорты, настройки, контекст.
Добавил модуль верхнего уровня `helpers`.

flake8 такой странный - запрещает multiline conditions, а ещё считает `else` statements бесполезными!
Покушение на святое.


# 05.31 wed

Работал над парсером аргументов командной строки, над командами.
Реализовал классный менеджер контекста. Очень много ходил вокруг да около, думал, экспериментировал.
Доволен результатом.

Дальше надо реализовать пирамиду тестирования.


# 05.26 fri

Done with Compose.
Modified the diagram.

Нужно попробовать писать документацию в декларативном, требовательном стиле must do this:
"""Функция foo должна принимать два и более числа на вход и возвращать их сумму."""


# 05.25 tue
Docker:
+ разрулил права
+ оптимизировал Dockerfile
+ bind mount volume && chmod files
+ specific enviroment tests inside a container
+ открыл порты

Расширил CI-тесты.


# 05.24 wed

Закончил базовое flask-application.
Начал работать над фронтенд контейнером:
```
docker build -t friends_img:0.1 .
docker run --detach \
        -it \
        --name Friends \
        --restart=on-failure:2 \
        --mount type=bind,src="$(pwd)"/tests,dst=/FriendsFrontend/tests,ro \
        --mount type=bind,src="$(pwd)"/friends,dst=/FriendsFrontend/friends,ro \
        --publish 5000:5000 \
        friends_img:0.1
```
Застрял с созданием пользователя и выдачей прав - проблема буквально на каждом шагу.


# 05.23 tue

Работал над структурой проекта и имена файлов. Сменил абстрактное "Frontend" на "FriendsFrontend".
Писал тесты. Нужно взять за правило всегда писать сюда перед коммитом.


# 05.22 mon

Читал python best practices a так же некоторые другие фундаментальные вещи:
про пакеты, билды, ооп и проч.
Судя по всему, с фундаментом я пока что заканчиваю и перехожу к написанию первого кода.
Потом, когда уже создам первые файлы, классы и конфигурации, я вернусь к фундаментальным темам
и подтяну их на актуальном примере. Возможно даже не один подобный цикл сделаю,
с периодическим вычитыванием теории. Подрасту в области стиля и паттернов.
***
Начал разрабатывать frontend :: flask.


# 05.21 sun

Совсем забыл писать сюда :(
Эти дни я изучал GitHub и его возможности.
Затем - документацию, её автоматическую генерацию, доктесты.
Затем - Git hooks, писал скрипты.
Сегодня написал скрипт для GitHub Actions, который автоматически запускает pytest.
Читал python best practices.


# 05.17 wed

Учился и работал над CI/CD.
Изучал возможности Github.


## 05.10

Размышляю об архитектуре и инструментах.


# Старт 2023.05.09

Начал с мыслей об экспериментах над старым проектом Alpaca-chan и DRF.
Загорелся идеей нового проекта - социальная сеть на Django. Я увидел, как смогу разом закрыть все мои пробелы в знаниях:
- REST API
- Асинхронные вычисления
- Подтянуть OOP
- Ещё раз закрепить Docker

Социальная сеть ведь прекрасно подойдёт: динамичный фронтенд, который отделён от бэкенда, необходимость максимально развязать все модули и реализовать устойчивость к огромным нагрузкам.
А платформа Docker поможет мне подняться на недостижимый ранее уровень распределённой системы с "множеством компьютеров".

Что нужно прояснить:
- Как масштабировать базу данных на множество осколков-контейнеров?
- Как обращаться к такой БД через единый веб-интерфейс?
- Как склеить такую БД с движком и моделями Django?
- Как избегать и обрабатывать ошибки и проблемы?
    * проблемы удалённой базы данных
    * проблемы высокой нагрузки

Дополнительно:
- реализовать цикл CI/CD
- системы мониторинга
- стиль кода и документация
- хранение медиа-файлов, маленький CDN
- асинхронная подгрузка медиа во фронтенд - насколько реально в Django
