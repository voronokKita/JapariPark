# Japari Park
#
# * Frontend
#   -- FriendsWeb p:8080
#   -- AccountsWeb p:4242
#   -- pgAdmin p:5050 user:admin@mail.net
#
# * Backend
#   -- JapariService p:8000
#      -- core app
#      -- Friends app
#      -- Accounts app
#
# * Database
#   -- JapariDB superuser:honeybot
#
# `docker compose up --detach --build`
name: japari-park


networks:
  data_overlay:
    # namespace: japari-db.api, pgadmin.api, japari-service.rest
    driver: overlay
    attachable: true

  frontend_overlay:
    # namespace: japari-service.rest, friends-web.rest
    driver: overlay
    attachable: true

  friends_web_bridge:
    driver: bridge


secrets:
  japari_data_build_pass:
    file: ./Database/JapariDB/secrets/.docker-build.secret
  japari_data_superuser_pass:
    file: ./Database/JapariDB/secrets/.superuser_pass.secret
  japari_data_admin_pass:
    file: ./Database/JapariDB/secrets/.admin_pass.secret
  japari_data_jservice_pass:
    file: ./Database/JapariDB/secrets/.japari_service_pass.secret

  japari_service_build_pass:
    file: ./Backend/JapariService/secrets/.docker-build.secret
  japari_service_django_secret:
    file: ./Backend/JapariService/secrets/.django.secret
  japari_service_postgres_pass:
    file: ./Backend/JapariService/secrets/.postgres_pass.secret

  friends_web_user_pass:
    file: ./Frontend/FriendsWeb/secrets/.docker-build.secret

  pgadmin_build_pass:
    file: ./Frontend/pgAdmin/secrets/.docker-build.secret
  pgadmin_pass:
    file: ./Frontend/pgAdmin/secrets/.pgadmin_pass.secret


services:
  # <<<Database layer>>>
  # JapariDB: a mono database
  japari_db:
    container_name: JapariDB
    stdin_open: true
    tty: true
    build:
      context: ./Database/JapariDB/
      secrets:
        - japari_data_build_pass
    image: japari_db
    volumes:
      - type: bind
        source: ./Database/JapariDB/mnt-data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./Database/JapariDB/mnt-logs
        target: /JapariDB/logs
    secrets:
      - source: japari_data_superuser_pass
        target: /run/secrets/superuser_pass
        uid: '1000'
        gid: '70'
        mode: 400
      - source: japari_data_admin_pass
        target: /run/secrets/admin_pass
        uid: '1000'
        gid: '70'
        mode: 400
      - source: japari_data_jservice_pass
        target: /run/secrets/jservice_pass
        uid: '1000'
        gid: '70'
        mode: 400
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/superuser_pass
    # ports: 5432:5432
    networks:
      data_overlay:
        aliases:
          - japari-db.api
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U honeybot -d japari_park_default \
                           -h japari-db.api -p 5432 -t 5 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 15s
    restart: on-failure
    stop_grace_period: 10s

  # <<<Backend layer>>>
  # JapariService: the main backend service
  japari_service:
    container_name: JapariService
    stdin_open: true
    tty: true
    depends_on:
      japari_db:
        condition: service_healthy
    build:
      context: ./Backend/JapariService/
      secrets:
        - japari_service_build_pass
    image: japari_service
    volumes:
      - type: bind
        source: ./Backend/JapariService/mnt-logs
        target: /JapariService/logs
      - type: bind
        source: ./Backend/JapariService/mnt-data
        target: /JapariService/mnt-data
    secrets:
      - source: japari_service_django_secret
        target: /run/secrets/django_secret
        uid: '1000'
        gid: '1000'
        mode: 400
      - source: japari_service_postgres_pass
        target: /run/secrets/postgres_pass
        uid: '1000'
        gid: '1000'
        mode: 400
    ports:
      - target: 80
        published: 8000
        protocol: tcp
        mode: host
    networks:
      data_overlay:
        priority: 1
        aliases:
          - japari-service.rest
      frontend_overlay:
        priority: 0
        aliases:
          - japari-service.rest
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://japari-service.rest/ping -o /dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 10s
    restart: on-failure
    stop_grace_period: 10s

  # <<<Frontend layer>>>
  # FriendsWeb: Gunicorn server
  friends_web_app:
    container_name: FriendsWeb
    stdin_open: true
    tty: true
    build:
      context: ./Frontend/FriendsWeb/
      secrets:
        - friends_web_user_pass
    image: friends_web
    volumes:
      - type: bind
        source: ./Frontend/FriendsWeb/logs
        target: /FriendsWeb/logs
    # ports: 5000:80
    networks:
      friends_web_bridge:
        aliases:
          - friends-web.app
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://frinds-web.app/ping -o /dev/null || exit 1"]
      interval: 3m
      timeout: 5s
      retries: 2
      start_period: 10s
    restart: on-failure
    stop_grace_period: 10s

  # FriendsWeb: NGINX reverse-proxy
  friends_web_nginx:
    container_name: FriendsWebNginx
    stdin_open: true
    tty: true
    # depends_on:
    #   friends_web_app:
    #     condition: service_started
    #   japari_service:
    #     condition: service_started
    #   japari_db:
    #     condition: service_started
    build:
      context: ./Frontend/FriendsWeb/
      dockerfile: ./NGINX/Dockerfile
      secrets:
        - friends_web_user_pass
    image: friends_web_proxy
    volumes:
      - type: bind
        source: ./Frontend/FriendsWeb/logs/servers
        target: /FriendsWebNginx/logs
    ports:
      - target: 80
        published: 8080
        protocol: tcp
        mode: host
    networks:
      friends_web_bridge:
        priority: 1
        aliases:
          - friends-web.proxy
      frontend_overlay:
        priority: 0
        aliases:
          - friends-web.rest
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://friends-web.rest/proxy/ping/ -o /dev/null || exit 1"]
      interval: 3m
      timeout: 5s
      retries: 2
      start_period: 10s
    restart: on-failure
    stop_grace_period: 10s

  # pgAdmin
  japari_pgadmin:
    container_name: pgAdmin
    stdin_open: true
    tty: true
    build:
      context: ./Frontend/pgAdmin/
      secrets:
        - pgadmin_build_pass
    image: japari_pgadmin
    volumes:
      - type: bind
        source: ./Frontend/pgAdmin/mnt-data/pgadata
        target: /var/lib/pgadmin
      - type: bind
        source: ./Frontend/pgAdmin/mnt-logs
        target: /JapariPGA/logs
    secrets:
      - source: pgadmin_pass
        target: /run/secrets/pgadmin_pass
        uid: '5050'
        gid: '5050'
        mode: 400
    environment:
      - PGADMIN_DEFAULT_PASSWORD_FILE=/run/secrets/pgadmin_pass
    ports:
      - target: 80
        published: 5050
        protocol: tcp
        mode: host
    networks:
      data_overlay:
        aliases:
          - pgadmin.api
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://pgadmin.api/login -o /dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 20s
    restart: on-failure
    stop_grace_period: 10s
